<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Janto's Blog]]></title>
  
  <link href="/hexo_blog/atom.xml" rel="self"/>
  <link href="http://wztboyking.github.io/hexo_blog/hexo_blog//"/>
  <updated>2015-08-10T08:20:45.000Z</updated>
  <id>http://wztboyking.github.io/hexo_blog/hexo_blog//</id>
  
  <author>
    <name><![CDATA[Janto]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[async异部流程控制模块]]></title>
    <link href="http://wztboyking.github.io/hexo_blog/hexo_blog/2015/08/10/async%E5%BC%82%E9%83%A8%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E6%A8%A1%E5%9D%97/"/>
    <id>http://wztboyking.github.io/hexo_blog/hexo_blog/2015/08/10/async异部流程控制模块/</id>
    <published>2015-08-10T08:16:06.000Z</published>
    <updated>2015-08-10T08:20:45.000Z</updated>
    <content type="html"><![CDATA[<p>  async主要实现了三个部分的流程控制功能：</p>
<p>  集合: Collections<br>  流程控制: Control Flow<br>  工具类: Utils</p>
<h3 id="1)-_集合:_Collections">1). 集合: Collections</h3><p>  detect: 用于取得集合中满足条件的第一个元素。<br>  sortBy: 对集合内的元素进行排序，依据每个元素进行某异步操作后产生的值，从小到大排序。<br>  some: 当集合中是否有至少一个元素满足条件时，最终callback得到的值为true，否则为false.<br>  every: 如果集合里每一个元素都满足条件，则传给最终回调的result为true，否则为false<br>  concat: 将多个异步操作的结果合并为一个数组。<br>  each: 如果想对同一个集合中的所有元素都执行同一个异步操作。<br>  map: 对集合中的每一个元素，执行某个异步操作，得到结果。所有的结果将汇总到最终的callback里。与each的区别是，each只关心操作不管最后的值，而map关心的最后产生的值。<br>  filter: 使用异步操作对集合中的元素进行筛选, 需要注意的是，iterator的callback只有一个参数，只能接收true或false。<br>  reject: reject跟filter正好相反，当测试为true时则抛弃<br>  reduce: 可以让我们给定一个初始值，用它与集合中的每一个元素做运算，最后得到一个值。reduce从左向右来遍历元素，如果想从右向左，可使用reduceRight。</p>
<h3 id="2)-_流程控制:_Control_Flow">2). 流程控制: Control Flow</h3><p>  doUntil: doUntil与doWhilst正好相反，当test为false时循环，与true时跳出。其它特性一致。<br>  forever: 无论条件循环执行，如果不出错，callback永远不被执行。<br>  waterfall: 按顺序依次执行一组函数。每个函数产生的值，都将传给下一个。<br>  series: 串行执行，一个函数数组中的每个函数，每一个函数执行完成之后才能执行下一个函数。<br>  parallel: 并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行。传给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。<br>  whilst: 相当于while，但其中的异步调用将在完成后才会进行下一次循环。<br>  doWhilst: 相当于do…while, doWhilst交换了fn,test的参数位置，先执行一次循环，再做test判断。<br>  until: until与whilst正好相反，当test为false时循环，与true时跳出。其它特性一致。<br>  compose: 创建一个包括一组异步函数的函数集合，每个函数会消费上一次函数的返回值。把f(),g(),h()异步函数，组合成f(g(h()))的形式，通过callback得到返回值。<br>  applyEach: 实现给一数组中每个函数传相同参数，通过callback返回。如果只传第一个参数，将返回一个函数对象，我可以传参调用。<br>  queue: 是一个串行的消息队列，通过限制了worker数量，不再一次性全部执行。当worker数量不够用时，新加入的任务将会排队等候，直到有新的worker可用。<br>  iterator: 将一组函数包装成为一个iterator，初次调用此iterator时，会执行定义中的第一个函数并返回第二个函数以供调用。<br>  apply: 可以让我们给一个函数预绑定多个参数并生成一个可直接调用的新函数，简化代码。<br>  nextTick: 与nodejs的nextTick一样，再最后调用函数。<br>  cargo: 一个串行的消息队列，类似于queue，通过限制了worker数量，不再一次性全部执行。不同之处在于，cargo每次会加载满额的任务做为任务单元，只有任务单元中全部执行完成后，才会加载新的任务单元。<br>  auto: 用来处理有依赖关系的多个任务的执行。<br>  times: 异步运行,times可以指定调用几次，并把结果合并到数组中返回<br>  timesSeries: 与time类似，唯一不同的是同步执行</p>
<h3 id="3)-_工具类:_Utils">3). 工具类: Utils</h3><p>  memoize: 让某一个函数在内存中缓存它的计算结果。对于相同的参数，只计算一次，下次就直接拿到之前算好的结果。<br>  unmemoize: 让已经被缓存的函数，返回不缓存的函数引用。<br>  dir: 与log类似，不同之处在于，会调用浏览器的console.dir()函数，显示为DOM视图。<br>  noConflict: 如果之前已经在全局域中定义了async变量，当导入本async.js时，会先把之前的async变量保存起来，然后覆盖它。仅仅用于浏览器端，在nodejs中没用，这里无法演示。<br>  log: 执行某异步函数，并记录它的返回值，日志输出。<br>  Demo : <a href="https://github.com/caolan/async" target="_blank" rel="external">https://github.com/caolan/async</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  async主要实现了三个部分的流程控制功能：</p>
<p>  集合: Collections<br>  流程控制: Control Flow<br>  工具类: Utils</p>
<h3 id="1)-_集合:_Collections">1). 集合: Collec]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[jekyllbootstrap-error]]></title>
    <link href="http://wztboyking.github.io/hexo_blog/hexo_blog/2015/08/04/error/"/>
    <id>http://wztboyking.github.io/hexo_blog/hexo_blog/2015/08/04/error/</id>
    <published>2015-08-04T15:45:04.000Z</published>
    <updated>2015-08-04T15:45:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="问题">问题</h3><p>The page build failed with the following error:</p>
<p>The submodule <code>_theme_packages/the-program</code> was not properly initialized with a <code>.gitmodules</code> file. For more information, see <a href="https://help.github.com/articles/page-build-failed-missing-submodule" target="_blank" rel="external">https://help.github.com/articles/page-build-failed-missing-submodule</a>.</p>
<p>If you have any questions you can contact us by replying to this email.</p>
<h3 id="解决办法">解决办法</h3><p>  git rm -r –cached _theme_packages<br>  然后在 .gitignore 加入 _theme_packages 文件夹:<br>  <pre><br>    *.swp<br>    _site<br>    _theme_packages<br>  </pre><br>  Finally, commit and push to GitHub</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="问题">问题</h3><p>The page build failed with the following error:</p>
<p>The submodule <code>_theme_packages/the-program</code> was not ]]>
    </summary>
    
  </entry>
  
</feed>